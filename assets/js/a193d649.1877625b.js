"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[137],{821:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>a});var s=i(5893),t=i(1151);const r={id:"data-structures",sidebar_label:"Data Structures",title:"Data Structures"},l="Data Structures",o={id:"commands/data-structures",title:"Data Structures",description:"Hash",source:"@site/docs/commands/data-structures.md",sourceDirName:"commands",slug:"/commands/data-structures",permalink:"/docs/commands/data-structures",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/Garnet/tree/main/website/docs/commands/data-structures.md",tags:[],version:"current",frontMatter:{id:"data-structures",sidebar_label:"Data Structures",title:"Data Structures"},sidebar:"garnetDocSidebar",previous:{title:"Raw String",permalink:"/docs/commands/raw-string"},next:{title:"Cluster Commands",permalink:"/docs/commands/cluster"}},d={},a=[{value:"Hash",id:"hash",level:2},{value:"HDEL",id:"hdel",level:3},{value:"Syntax",id:"syntax",level:4},{value:"More Information: <a>HDEL</a>",id:"more-information-hdel",level:4},{value:"HEXISTS",id:"hexists",level:3},{value:"Syntax",id:"syntax-1",level:4},{value:"More Information: <a>HEXISTS</a>",id:"more-information-hexists",level:4},{value:"HGET",id:"hget",level:3},{value:"Syntax",id:"syntax-2",level:4},{value:"More Information: <a>HGET</a>",id:"more-information-hget",level:4},{value:"HGETALL",id:"hgetall",level:3},{value:"Syntax",id:"syntax-3",level:4},{value:"More Information: <a>HGETALL</a>",id:"more-information-hgetall",level:4},{value:"HINCRBY",id:"hincrby",level:3},{value:"Syntax",id:"syntax-4",level:4},{value:"More Information: <a>HINCRBY</a>",id:"more-information-hincrby",level:4},{value:"HINCRBYFLOAT",id:"hincrbyfloat",level:3},{value:"Syntax",id:"syntax-5",level:4},{value:"More Information: <a>HINCRBYFLOAT</a>",id:"more-information-hincrbyfloat",level:4},{value:"HKEYS",id:"hkeys",level:3},{value:"Syntax",id:"syntax-6",level:4},{value:"More Information: <a>HKEYS</a>",id:"more-information-hkeys",level:4},{value:"HLEN",id:"hlen",level:3},{value:"Syntax",id:"syntax-7",level:4},{value:"More Information: <a>HLEN</a>",id:"more-information-hlen",level:4},{value:"HMGET",id:"hmget",level:3},{value:"Syntax",id:"syntax-8",level:4},{value:"More Information: <a>HMGET</a>",id:"more-information-hmget",level:4},{value:"HMSET",id:"hmset",level:3},{value:"Syntax",id:"syntax-9",level:4},{value:"More Information: <a>HMSET</a>",id:"more-information-hmset",level:4},{value:"HRANDFIELD",id:"hrandfield",level:3},{value:"Syntax",id:"syntax-10",level:4},{value:"More Information: <a>HRANDFIELD</a>",id:"more-information-hrandfield",level:4},{value:"HSCAN",id:"hscan",level:3},{value:"Syntax",id:"syntax-11",level:4},{value:"More Information: <a>HSCAN</a>",id:"more-information-hscan",level:4},{value:"HSET",id:"hset",level:3},{value:"Syntax",id:"syntax-12",level:4},{value:"More Information: <a>HSET</a>",id:"more-information-hset",level:4},{value:"HSETNX",id:"hsetnx",level:3},{value:"Syntax",id:"syntax-13",level:4},{value:"More Information: <a>HSETNX</a>",id:"more-information-hsetnx",level:4},{value:"HVALS",id:"hvals",level:3},{value:"Syntax",id:"syntax-14",level:4},{value:"More Information: <a>HVALS</a>",id:"more-information-hvals",level:4},{value:"List",id:"list",level:2},{value:"LINDEX",id:"lindex",level:3},{value:"Syntax",id:"syntax-15",level:4},{value:"More Information: <a>LINDEX</a>",id:"more-information-lindex",level:4},{value:"LINSERT",id:"linsert",level:3},{value:"Syntax",id:"syntax-16",level:4},{value:"More Information: <a>LINSERT</a>",id:"more-information-linsert",level:4},{value:"LLEN",id:"llen",level:3},{value:"Syntax",id:"syntax-17",level:4},{value:"More Information: <a>LLEN</a>",id:"more-information-llen",level:4},{value:"LMOVE",id:"lmove",level:3},{value:"Syntax",id:"syntax-18",level:4},{value:"More Information: <a>LMOVE</a>",id:"more-information-lmove",level:4},{value:"LPOP",id:"lpop",level:3},{value:"Syntax",id:"syntax-19",level:4},{value:"More Information: <a>LPOP</a>",id:"more-information-lpop",level:4},{value:"LPUSH",id:"lpush",level:3},{value:"Syntax",id:"syntax-20",level:4},{value:"More Information: <a>LPUSH</a>",id:"more-information-lpush",level:4},{value:"LPUSHX",id:"lpushx",level:3},{value:"Syntax",id:"syntax-21",level:4},{value:"More Information: <a>LPUSHX</a>",id:"more-information-lpushx",level:4},{value:"LRANGE",id:"lrange",level:3},{value:"Syntax",id:"syntax-22",level:4},{value:"More Information: <a>LRANGE</a>",id:"more-information-lrange",level:4},{value:"LREM",id:"lrem",level:3},{value:"Syntax",id:"syntax-23",level:4},{value:"More Information: <a>LREM</a>",id:"more-information-lrem",level:4},{value:"LTRIM",id:"ltrim",level:3},{value:"Syntax",id:"syntax-24",level:4},{value:"More Information: <a>LTRIM</a>",id:"more-information-ltrim",level:4},{value:"RPOP",id:"rpop",level:3},{value:"Syntax",id:"syntax-25",level:4},{value:"More Information: <a>RPOP</a>",id:"more-information-rpop",level:4},{value:"RPOPLPUSH",id:"rpoplpush",level:3},{value:"Syntax",id:"syntax-26",level:4},{value:"More Information: <a>RPOPLPUSH</a>",id:"more-information-rpoplpush",level:4},{value:"RPUSH",id:"rpush",level:3},{value:"Syntax",id:"syntax-27",level:4},{value:"More Information: <a>RPUSH</a>",id:"more-information-rpush",level:4},{value:"RPUSHX",id:"rpushx",level:3},{value:"Syntax",id:"syntax-28",level:4},{value:"More Information: <a>RPUSHX</a>",id:"more-information-rpushx",level:4},{value:"Sets",id:"sets",level:2},{value:"SADD",id:"sadd",level:3},{value:"Syntax",id:"syntax-29",level:4},{value:"More Information: <a>SADD</a>",id:"more-information-sadd",level:4},{value:"SCARD",id:"scard",level:3},{value:"Syntax",id:"syntax-30",level:4},{value:"More Information: <a>SCARD</a>",id:"more-information-scard",level:4},{value:"SMEMBERS",id:"smembers",level:3},{value:"Syntax",id:"syntax-31",level:4},{value:"More Information: <a>SMEMBERS</a>",id:"more-information-smembers",level:4},{value:"SPOP",id:"spop",level:3},{value:"Syntax",id:"syntax-32",level:4},{value:"More Information: <a>SPOP</a>",id:"more-information-spop",level:4},{value:"SREM",id:"srem",level:3},{value:"Syntax",id:"syntax-33",level:4},{value:"More Information: <a>SREM</a>",id:"more-information-srem",level:4},{value:"SSCAN",id:"sscan",level:3},{value:"Syntax",id:"syntax-34",level:4},{value:"More Information: <a>SSCAN</a>",id:"more-information-sscan",level:4},{value:"Sorted Sets",id:"sorted-sets",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"data-structures",children:"Data Structures"}),"\n",(0,s.jsx)(n.h2,{id:"hash",children:"Hash"}),"\n",(0,s.jsx)(n.h3,{id:"hdel",children:"HDEL"}),"\n",(0,s.jsx)(n.h4,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["HDEL ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<field>"})," ",(0,s.jsx)(n.code,{children:"[field ...]"})]}),"\n",(0,s.jsxs)(n.p,{children:["Removes the specified fields from the hash stored at ",(0,s.jsx)(n.strong,{children:"key"}),". Specified fields that do not exist within this hash are ignored. If ",(0,s.jsx)(n.strong,{children:"key"})," does not exist, it is treated as an empty hash and this command returns 0."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-hdel",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/hdel/",target:"_blank",children:"HDEL"})]}),"\n",(0,s.jsx)(n.h3,{id:"hexists",children:"HEXISTS"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-1",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["HEXISTS ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<field>"})]}),"\n",(0,s.jsxs)(n.p,{children:["Returns if field is an existing field in the hash stored at ",(0,s.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-hexists",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/hexists/",target:"_blank",children:"HEXISTS"})]}),"\n",(0,s.jsx)(n.h3,{id:"hget",children:"HGET"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-2",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["HGET ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<field>"})]}),"\n",(0,s.jsxs)(n.p,{children:["Returns the value associated with field in the hash stored at ",(0,s.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-hget",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/hget/",target:"_blank",children:"HGET"})]}),"\n",(0,s.jsx)(n.h3,{id:"hgetall",children:"HGETALL"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-3",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["HGETALL ",(0,s.jsx)(n.code,{children:"<key>"})]}),"\n",(0,s.jsxs)(n.p,{children:["Returns all fields and values of the hash stored at ",(0,s.jsx)(n.strong,{children:"key"}),". In the returned value, every field name is followed by its value, so the length of the reply is twice the size of the hash."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-hgetall",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/hgetall/",target:"_blank",children:"HGETALL"})]}),"\n",(0,s.jsx)(n.h3,{id:"hincrby",children:"HINCRBY"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-4",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["HINCRBY ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<field>"})," ",(0,s.jsx)(n.code,{children:"<increment>"})]}),"\n",(0,s.jsxs)(n.p,{children:["Increments the number stored at field in the hash stored at ",(0,s.jsx)(n.strong,{children:"key"})," by increment.\r\nIf ",(0,s.jsx)(n.strong,{children:"key"})," does not exist, a new ",(0,s.jsx)(n.strong,{children:"key"})," holding a hash is created. If field does not exist the value is set to 0 before the operation is performed.\r\nThe range of values supported by HINCRBY is limited to 64 bit signed integers."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-hincrby",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/hincrby/",target:"_blank",children:"HINCRBY"})]}),"\n",(0,s.jsx)(n.h3,{id:"hincrbyfloat",children:"HINCRBYFLOAT"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-5",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["HINCRBYFLOAT ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<field>"})," ",(0,s.jsx)(n.code,{children:"<increment>"})]}),"\n",(0,s.jsxs)(n.p,{children:["Increment the specified field of a hash stored at ",(0,s.jsx)(n.strong,{children:"key"}),", and representing a floating point number, by the specified increment. If the increment value is negative, the result is to have the hash field value decremented instead of incremented. If the field does not exist, it is set to 0 before performing the operation. An error is returned if one of the following conditions occur:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The field contains a value of the wrong type (not a string)."}),"\n",(0,s.jsx)(n.li,{children:"The current field content or the specified increment are not parsable as a double precision floating point number."}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-hincrbyfloat",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/hincrbyfloat/",target:"_blank",children:"HINCRBYFLOAT"})]}),"\n",(0,s.jsx)(n.h3,{id:"hkeys",children:"HKEYS"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-6",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["HKEYS ",(0,s.jsx)(n.code,{children:"<key>"})]}),"\n",(0,s.jsxs)(n.p,{children:["Returns all field names in the hash stored at ",(0,s.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-hkeys",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/hkeys/",target:"_blank",children:"HKEYS"})]}),"\n",(0,s.jsx)(n.h3,{id:"hlen",children:"HLEN"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-7",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["HLEN ",(0,s.jsx)(n.code,{children:"<key>"})]}),"\n",(0,s.jsxs)(n.p,{children:["Returns the number of fields contained in the hash stored at ",(0,s.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-hlen",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/hlen/",target:"_blank",children:"HLEN"})]}),"\n",(0,s.jsx)(n.h3,{id:"hmget",children:"HMGET"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-8",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["HMGET ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<field>"})," ",(0,s.jsx)(n.code,{children:"[field ...]"})]}),"\n",(0,s.jsxs)(n.p,{children:["Returns the values associated with the specified fields in the hash stored at ",(0,s.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["For every field that does not exist in the hash, a nil value is returned. Because non-existing keys are treated as empty hashes, running HMGET against a non-existing ",(0,s.jsx)(n.strong,{children:"key"})," will return a list of nil values."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-hmget",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/hmget/",target:"_blank",children:"HMGET"})]}),"\n",(0,s.jsx)(n.h3,{id:"hmset",children:"HMSET"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-9",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["HMSET ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<field>"})," ",(0,s.jsx)(n.code,{children:"<value>"})," ",(0,s.jsx)(n.code,{children:"[field value ...]"})]}),"\n",(0,s.jsx)(n.p,{children:"Deprecated in favor of HSET with multiple field-value pairs."}),"\n",(0,s.jsxs)(n.p,{children:["Sets the specified fields to their respective values in the hash stored at ",(0,s.jsx)(n.strong,{children:"key"}),". This command overwrites any specified fields already existing in the hash. If ",(0,s.jsx)(n.strong,{children:"key"})," does not exist, a new ",(0,s.jsx)(n.strong,{children:"key"})," holding a hash is created."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-hmset",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/hmset/",target:"_blank",children:"HMSET"})]}),"\n",(0,s.jsx)(n.h3,{id:"hrandfield",children:"HRANDFIELD"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-10",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["HRANDFIELD ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"[count [WITHVALUES]]"})]}),"\n",(0,s.jsxs)(n.p,{children:["When called with just the ",(0,s.jsx)(n.strong,{children:"key"})," argument, return a random field from the hash value stored at ",(0,s.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"If the provided count argument is positive, return an array of distinct fields. The array's length is either count or the hash's number of fields (HLEN), whichever is lower."}),"\n",(0,s.jsx)(n.p,{children:"If called with a negative count, the behavior changes and the command is allowed to return the same field multiple times. In this case, the number of returned fields is the absolute value of the specified count."}),"\n",(0,s.jsx)(n.p,{children:"The optional WITHVALUES modifier changes the reply so it includes the respective values of the randomly selected hash fields."}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-hrandfield",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/hrandfield/",target:"_blank",children:"HRANDFIELD"})]}),"\n",(0,s.jsx)(n.h3,{id:"hscan",children:"HSCAN"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-11",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["HSCAN ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"cursor"})," ",(0,s.jsx)(n.code,{children:"[MATCH pattern]"})," ",(0,s.jsx)(n.code,{children:"[COUNT count]"})]}),"\n",(0,s.jsxs)(n.p,{children:["Iterates over the fields and values of a hash stored at a given ",(0,s.jsx)(n.strong,{children:"key"}),". The cursor parameter represents the index of the element in the collection from where to start the scan. The match parameter is used for retrieving only the matched fields from the hash. The count parameter is the number of elements that will be returned at each iteration."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-hscan",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/hscan/",target:"_blank",children:"HSCAN"})]}),"\n",(0,s.jsx)(n.h3,{id:"hset",children:"HSET"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-12",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["HSET ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<field>"})," ",(0,s.jsx)(n.code,{children:"<value>"})]}),"\n",(0,s.jsxs)(n.p,{children:["Sets the specified fields to their respective values in the hash stored at ",(0,s.jsx)(n.strong,{children:"key"}),". This command overwrites the values of specified fields that exist in the hash. If ",(0,s.jsx)(n.strong,{children:"key"})," does not exist, a new ",(0,s.jsx)(n.strong,{children:"key"})," holding a hash is created."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-hset",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/hset/",target:"_blank",children:"HSET"})]}),"\n",(0,s.jsx)(n.h3,{id:"hsetnx",children:"HSETNX"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-13",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["HSETNX ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<field>"})," ",(0,s.jsx)(n.code,{children:"<value>"})]}),"\n",(0,s.jsxs)(n.p,{children:["Sets field in the hash stored at ",(0,s.jsx)(n.strong,{children:"key"})," to value, only if field does not yet exist. If ",(0,s.jsx)(n.strong,{children:"key"})," does not exist, a new ",(0,s.jsx)(n.strong,{children:"key"})," holding a hash is created. If field already exists, this operation has no effect."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-hsetnx",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/hsetnx/",target:"_blank",children:"HSETNX"})]}),"\n",(0,s.jsx)(n.h3,{id:"hvals",children:"HVALS"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-14",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["HVALS ",(0,s.jsx)(n.code,{children:"<key>"})]}),"\n",(0,s.jsxs)(n.p,{children:["Returns all values in the hash stored at ",(0,s.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-hvals",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/hvals/",target:"_blank",children:"HVALS"})]}),"\n",(0,s.jsx)(n.h2,{id:"list",children:"List"}),"\n",(0,s.jsx)(n.h3,{id:"lindex",children:"LINDEX"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-15",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["LINDEX ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<index>"})]}),"\n",(0,s.jsxs)(n.p,{children:["Removes the element at index ",(0,s.jsx)(n.code,{children:"<index>"})," in the list stored at ",(0,s.jsx)(n.strong,{children:"key"}),". The index is zero-based. Negative indices can be used to designate elements starting at the tail of the list."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-lindex",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/lindex/",target:"_blank",children:"LINDEX"})]}),"\n",(0,s.jsx)(n.h3,{id:"linsert",children:"LINSERT"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-16",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["LINSERT ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<BEFORE|AFTER>"})," ",(0,s.jsx)(n.code,{children:"<pivot>"})," ",(0,s.jsx)(n.code,{children:"<element>"})]}),"\n",(0,s.jsxs)(n.p,{children:["Inserts element in the list stored at ",(0,s.jsx)(n.strong,{children:"key"})," either before or after the reference value pivot. When key does not exist, it is considered an empty list and no operation is performed."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-linsert",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/linsert/",target:"_blank",children:"LINSERT"})]}),"\n",(0,s.jsx)(n.h3,{id:"llen",children:"LLEN"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-17",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["LLEN ",(0,s.jsx)(n.code,{children:"<key>"})]}),"\n",(0,s.jsx)(n.p,{children:"Returns the length of the list stored at key. If key does not exist, it is interpreted as an empty list and 0 is returned."}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-llen",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/llen/",target:"_blank",children:"LLEN"})]}),"\n",(0,s.jsx)(n.h3,{id:"lmove",children:"LMOVE"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-18",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["LMOVE ",(0,s.jsx)(n.code,{children:"<source>"})," ",(0,s.jsx)(n.code,{children:"<destination>"})," ",(0,s.jsx)(n.code,{children:"<LEFT | RIGHT>"})," ",(0,s.jsx)(n.code,{children:"<LEFT | RIGHT>"})]}),"\n",(0,s.jsxs)(n.p,{children:["Atomically returns and removes the first/last element (head/tail depending on the wherefrom argument) of the list stored at ",(0,s.jsx)(n.strong,{children:"source"}),", and pushes the element at the first/last element (head/tail depending on the whereto argument) of the list stored at ",(0,s.jsx)(n.strong,{children:"destination"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This command comes in place of the now deprecated RPOPLPUSH. Doing LMOVE RIGHT LEFT is equivalent."}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-lmove",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/lmove/",target:"_blank",children:"LMOVE"})]}),"\n",(0,s.jsx)(n.h3,{id:"lpop",children:"LPOP"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-19",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["LPOP ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"[count]"})]}),"\n",(0,s.jsxs)(n.p,{children:["Removes and returns the first elements of the list stored at ",(0,s.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"By default, the command pops a single element from the beginning of the list. When provided with the optional count argument, the reply will consist of up to count elements, depending on the list's length."}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-lpop",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/lpop/",target:"_blank",children:"LPOP"})]}),"\n",(0,s.jsx)(n.h3,{id:"lpush",children:"LPUSH"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-20",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["LPUSH ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"[element]"})," ",(0,s.jsx)(n.code,{children:"[element ...]"})]}),"\n",(0,s.jsxs)(n.p,{children:["Insert all the specified values at the head of the list stored at ",(0,s.jsx)(n.strong,{children:"key"}),". If ",(0,s.jsx)(n.strong,{children:"key"})," does not exist, it is created as empty list before performing the push operations."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-lpush",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/lpush/",target:"_blank",children:"LPUSH"})]}),"\n",(0,s.jsx)(n.h3,{id:"lpushx",children:"LPUSHX"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-21",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["LPUSHX ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"[element]"})," ",(0,s.jsx)(n.code,{children:"[element ...]"})]}),"\n",(0,s.jsxs)(n.p,{children:["Inserts specified values at the head of the list stored at ",(0,s.jsx)(n.strong,{children:"key"}),", only if ",(0,s.jsx)(n.strong,{children:"key"})," already exists and holds a list. In contrary to LPUSH, no operation will be performed when ",(0,s.jsx)(n.strong,{children:"key"})," does not yet exist."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-lpushx",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/lpushx/",target:"_blank",children:"LPUSHX"})]}),"\n",(0,s.jsx)(n.h3,{id:"lrange",children:"LRANGE"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-22",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["LRANGE ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<start>"})," ",(0,s.jsx)(n.code,{children:"<stop>"})]}),"\n",(0,s.jsxs)(n.p,{children:["Returns the specified elements of the list stored at ",(0,s.jsx)(n.strong,{children:"key"}),". The offsets start and stop are zero-based indexes, with 0 being the first element of the list (the head of the list), 1 being the next element and so on."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-lrange",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/lrange/",target:"_blank",children:"LRANGE"})]}),"\n",(0,s.jsx)(n.h3,{id:"lrem",children:"LREM"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-23",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["LREM ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<count>"})," ",(0,s.jsx)(n.code,{children:"<element>"})]}),"\n",(0,s.jsxs)(n.p,{children:["Removes the first count occurrences of elements equal to element from the list stored at ",(0,s.jsx)(n.strong,{children:"key"}),". The ",(0,s.jsx)(n.strong,{children:"count"})," argument influences the operation in the following ways:"]}),"\n",(0,s.jsx)(n.p,{children:"count > 0: Remove elements equal to element moving from head to tail.\r\ncount < 0: Remove elements equal to element moving from tail to head.\r\ncount = 0: Remove all elements equal to element."}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-lrem",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/lrem/",target:"_blank",children:"LREM"})]}),"\n",(0,s.jsx)(n.h3,{id:"ltrim",children:"LTRIM"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-24",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["LTRIM ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<start>"})," ",(0,s.jsx)(n.code,{children:"<stop>"})]}),"\n",(0,s.jsx)(n.p,{children:"Trim an existing list so that it will contain only the specified range of elements specified. Both start and stop are zero-based indexes, where 0 is the first element of the list (the head), 1 the next element and so on."}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-ltrim",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/ltrim/",target:"_blank",children:"LTRIM"})]}),"\n",(0,s.jsx)(n.h3,{id:"rpop",children:"RPOP"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-25",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["RPOP ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"[<count>]"})]}),"\n",(0,s.jsxs)(n.p,{children:["Removes and returns the last elements of the list stored at ",(0,s.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"By default, the command pops a single element from the end of the list. When provided with the optional count argument, the reply will consist of up to count elements, depending on the list's length."}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-rpop",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/rpop/",target:"_blank",children:"RPOP"})]}),"\n",(0,s.jsx)(n.h3,{id:"rpoplpush",children:"RPOPLPUSH"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-26",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["RPOPLPUSH ",(0,s.jsx)(n.code,{children:"<source>"})," ",(0,s.jsx)(n.code,{children:"<destination>"})]}),"\n",(0,s.jsx)(n.p,{children:"Atomically returns and removes the last element (tail) of the list stored at source, and pushes the element at the first element (head) of the list stored at destination."}),"\n",(0,s.jsx)(n.p,{children:"It can be replaced by LMOVE with the RIGHT and LEFT arguments when migrating or writing new code."}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-rpoplpush",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/rpoplpush/",target:"_blank",children:"RPOPLPUSH"})]}),"\n",(0,s.jsx)(n.h3,{id:"rpush",children:"RPUSH"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-27",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["RPUSH ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<element>"})," ",(0,s.jsx)(n.code,{children:"[<element>]"})]}),"\n",(0,s.jsxs)(n.p,{children:["Insert all the specified values at the tail of the list stored at ",(0,s.jsx)(n.strong,{children:"key"}),". If ",(0,s.jsx)(n.strong,{children:"key"})," does not exist, it is created as empty list before performing the push operation."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-rpush",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/rpush/",target:"_blank",children:"RPUSH"})]}),"\n",(0,s.jsx)(n.h3,{id:"rpushx",children:"RPUSHX"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-28",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["RPUSHX ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<element>"})," ",(0,s.jsx)(n.code,{children:"[<element>]"})]}),"\n",(0,s.jsxs)(n.p,{children:["Inserts specified values at the tail of the list stored at ",(0,s.jsx)(n.strong,{children:"key"}),", only if ",(0,s.jsx)(n.strong,{children:"key"})," already exists and holds a list. In contrary to RPUSH, no operation will be performed when ",(0,s.jsx)(n.strong,{children:"key"})," does not yet exist."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-rpushx",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/rpushx/",target:"_blank",children:"RPUSHX"})]}),"\n",(0,s.jsx)(n.h2,{id:"sets",children:"Sets"}),"\n",(0,s.jsx)(n.h3,{id:"sadd",children:"SADD"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-29",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["SADD ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<member>"})," ",(0,s.jsx)(n.code,{children:"[<member>]"})]}),"\n",(0,s.jsxs)(n.p,{children:["Adds the specified members to the set stored at ",(0,s.jsx)(n.strong,{children:"key"}),". Specified members that are already a member of this set are ignored. If ",(0,s.jsx)(n.strong,{children:"key"})," does not exist, a new set is created before adding the specified members."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-sadd",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/sadd/",target:"_blank",children:"SADD"})]}),"\n",(0,s.jsx)(n.h3,{id:"scard",children:"SCARD"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-30",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["SCARD ",(0,s.jsx)(n.code,{children:"<key>"})]}),"\n",(0,s.jsxs)(n.p,{children:["Returns the set cardinality (number of elements) of the set stored at ",(0,s.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-scard",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/scard/",target:"_blank",children:"SCARD"})]}),"\n",(0,s.jsx)(n.h3,{id:"smembers",children:"SMEMBERS"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-31",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["SMEMBERS ",(0,s.jsx)(n.code,{children:"<key>"})]}),"\n",(0,s.jsxs)(n.p,{children:["Returns all the members of the set value stored at ",(0,s.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-smembers",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/smembers/",target:"_blank",children:"SMEMBERS"})]}),"\n",(0,s.jsx)(n.h3,{id:"spop",children:"SPOP"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-32",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["SPOP ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"[<count>]"})]}),"\n",(0,s.jsxs)(n.p,{children:["Removes and returns one or more random members from the set value stored at ",(0,s.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-spop",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/spop/",target:"_blank",children:"SPOP"})]}),"\n",(0,s.jsx)(n.h3,{id:"srem",children:"SREM"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-33",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["SREM ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<member>"})," ",(0,s.jsx)(n.code,{children:"[<member>]"})]}),"\n",(0,s.jsxs)(n.p,{children:["Removes the specified members from the set stored at ",(0,s.jsx)(n.strong,{children:"key"}),". Specified members that are not a member of this set are ignored. If ",(0,s.jsx)(n.strong,{children:"key"})," does not exist, it is treated as an empty set and this command returns 0."]}),"\n",(0,s.jsxs)(n.p,{children:["An error is returned when the value stored at ",(0,s.jsx)(n.strong,{children:"key"})," is not a set."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-srem",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/srem/",target:"_blank",children:"SREM"})]}),"\n",(0,s.jsx)(n.h3,{id:"sscan",children:"SSCAN"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-34",children:"Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["SSCAN ",(0,s.jsx)(n.code,{children:"<key>"})," ",(0,s.jsx)(n.code,{children:"<cursor>"})," ",(0,s.jsx)(n.code,{children:"[<MATCH pattern>]"})," ",(0,s.jsx)(n.code,{children:"[<COUNT count>]"})]}),"\n",(0,s.jsxs)(n.p,{children:["Iterates elements of Sets types. Same as HSCAN and ZSCAN commands, SSCAN is used in order to incrementally iterate over the elements of the set stored at ",(0,s.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"match"})," parameter allows to apply a filter to elements after they have been retrieved from the collection. The ",(0,s.jsx)(n.strong,{children:"count"})," option sets a limit to the maximum number of items returned from the server to this command. This limit is also set in conjunction with the object-scan-count-limit of the global server settings."]}),"\n",(0,s.jsxs)(n.h4,{id:"more-information-sscan",children:["More Information: ",(0,s.jsx)("a",{href:"https://redis.io/commands/sscan/",target:"_blank",children:"SSCAN"})]}),"\n",(0,s.jsx)(n.h2,{id:"sorted-sets",children:"Sorted Sets"}),"\n",(0,s.jsx)(n.p,{children:"TODO"})]})}function c(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>l});var s=i(7294);const t={},r=s.createContext(t);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);