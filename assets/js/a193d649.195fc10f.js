"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[137],{821:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>t,contentTitle:()=>r,default:()=>x,frontMatter:()=>d,metadata:()=>a,toc:()=>h});var i=l(5893),s=l(1151);const d={id:"data-structures",sidebar_label:"Data Structures",title:"Data Structures"},r="Data Structures",a={id:"commands/data-structures",title:"Data Structures",description:"Hash",source:"@site/docs/commands/data-structures.md",sourceDirName:"commands",slug:"/commands/data-structures",permalink:"/docs/commands/data-structures",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/Garnet/tree/main/website/docs/commands/data-structures.md",tags:[],version:"current",frontMatter:{id:"data-structures",sidebar_label:"Data Structures",title:"Data Structures"},sidebar:"garnetDocSidebar",previous:{title:"Raw String",permalink:"/docs/commands/raw-string"},next:{title:"Transactions",permalink:"/docs/extensions/transactions"}},t={},h=[{value:"Hash",id:"hash",level:2},{value:"HDEL",id:"hdel",level:4},{value:"Available since:",id:"available-since",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Return",id:"return",level:4},{value:"Examples",id:"examples",level:4},{value:"HEXISTS",id:"hexists",level:4},{value:"Available since:",id:"available-since-1",level:4},{value:"Syntax",id:"syntax-1",level:4},{value:"Return",id:"return-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"HGET",id:"hget",level:4},{value:"Available since:",id:"available-since-2",level:4},{value:"Syntax",id:"syntax-2",level:4},{value:"Return",id:"return-2",level:4},{value:"Examples",id:"examples-2",level:4},{value:"HGETALL",id:"hgetall",level:4},{value:"Available since:",id:"available-since-3",level:4},{value:"Syntax",id:"syntax-3",level:4},{value:"Return",id:"return-3",level:4},{value:"Examples",id:"examples-3",level:4},{value:"HINCRBY",id:"hincrby",level:4},{value:"Available since:",id:"available-since-4",level:4},{value:"Syntax",id:"syntax-4",level:4},{value:"Return",id:"return-4",level:4},{value:"Examples",id:"examples-4",level:4},{value:"HINCRBYFLOAT",id:"hincrbyfloat",level:4},{value:"Available since:",id:"available-since-5",level:4},{value:"Syntax",id:"syntax-5",level:4},{value:"Return",id:"return-5",level:4},{value:"Examples",id:"examples-5",level:4},{value:"HKEYS",id:"hkeys",level:4},{value:"Available since:",id:"available-since-6",level:4},{value:"Syntax",id:"syntax-6",level:4},{value:"Return",id:"return-6",level:4},{value:"Examples",id:"examples-6",level:4},{value:"HLEN",id:"hlen",level:4},{value:"Available since:",id:"available-since-7",level:4},{value:"Syntax",id:"syntax-7",level:4},{value:"Return",id:"return-7",level:4},{value:"Examples",id:"examples-7",level:4},{value:"HMGET",id:"hmget",level:4},{value:"Available since:",id:"available-since-8",level:4},{value:"Syntax",id:"syntax-8",level:4},{value:"Return",id:"return-8",level:4},{value:"Examples",id:"examples-8",level:4},{value:"HMSET",id:"hmset",level:4},{value:"Available since:",id:"available-since-9",level:4},{value:"Syntax",id:"syntax-9",level:4},{value:"Return",id:"return-9",level:4},{value:"Examples",id:"examples-9",level:4},{value:"HRANDFIELD",id:"hrandfield",level:4},{value:"Available since:",id:"available-since-10",level:4},{value:"Syntax",id:"syntax-10",level:4},{value:"Return",id:"return-10",level:4},{value:"Examples",id:"examples-10",level:4},{value:"HSCAN",id:"hscan",level:4},{value:"Available since:",id:"available-since-11",level:4},{value:"Syntax",id:"syntax-11",level:4},{value:"Return",id:"return-11",level:4},{value:"Examples",id:"examples-11",level:4},{value:"HSET",id:"hset",level:4},{value:"Available since:",id:"available-since-12",level:4},{value:"Syntax",id:"syntax-12",level:4},{value:"Return",id:"return-12",level:4},{value:"Examples",id:"examples-12",level:4},{value:"HSETNX",id:"hsetnx",level:4},{value:"Available since:",id:"available-since-13",level:4},{value:"Syntax",id:"syntax-13",level:4},{value:"Return",id:"return-13",level:4},{value:"Examples",id:"examples-13",level:4},{value:"HVALS",id:"hvals",level:4},{value:"Available since:",id:"available-since-14",level:4},{value:"Syntax",id:"syntax-14",level:4},{value:"Return",id:"return-14",level:4},{value:"Examples",id:"examples-14",level:4},{value:"List",id:"list",level:2},{value:"Sorted Sets",id:"sorted-sets",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"data-structures",children:"Data Structures"}),"\n",(0,i.jsx)(n.h2,{id:"hash",children:"Hash"}),"\n",(0,i.jsx)(n.h4,{id:"hdel",children:"HDEL"}),"\n",(0,i.jsxs)(n.p,{children:["Removes the specified fields from the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),". Specified fields that do not exist within this hash are ignored. If ",(0,i.jsx)(n.strong,{children:"key"})," does not exist, it is treated as an empty hash and this command returns 0."]}),"\n",(0,i.jsx)(n.h4,{id:"available-since",children:"Available since:"}),"\n",(0,i.jsx)(n.p,{children:"1.0"}),"\n",(0,i.jsx)(n.h4,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["HDEL ",(0,i.jsx)(n.code,{children:"<key>"})," ",(0,i.jsx)(n.code,{children:"<field>"})," ",(0,i.jsx)(n.code,{children:"[field ...]"})]}),"\n",(0,i.jsx)(n.h4,{id:"return",children:"Return"}),"\n",(0,i.jsx)(n.p,{children:"Integer Reply:"}),"\n",(0,i.jsx)(n.p,{children:"The number of fields that were removed from the hash, excluding any specified but non-existing fields."}),"\n",(0,i.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'> HSET myhash field1 "foo"\n(integer) 1\n\n> HDEL myhash field1\n(integer) 1\n\n> HDEL myhash field2\n(integer) 0\n\n'})}),"\n",(0,i.jsx)(n.h4,{id:"hexists",children:"HEXISTS"}),"\n",(0,i.jsxs)(n.p,{children:["Returns if field is an existing field in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"available-since-1",children:"Available since:"}),"\n",(0,i.jsx)(n.p,{children:"1.0"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-1",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["HEXISTS ",(0,i.jsx)(n.code,{children:"<key>"})," ",(0,i.jsx)(n.code,{children:"<field>"})]}),"\n",(0,i.jsx)(n.h4,{id:"return-1",children:"Return"}),"\n",(0,i.jsx)(n.p,{children:"Integer Reply:"}),"\n",(0,i.jsxs)(n.p,{children:["0 if the hash does not contain the field, or the ",(0,i.jsx)(n.strong,{children:"key"})," does not exist."]}),"\n",(0,i.jsx)(n.p,{children:"1 if the hash contains the field."}),"\n",(0,i.jsx)(n.h4,{id:"examples-1",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'> HSET myhash field1 "foo"\n(integer) 1\n\n> HEXISTS myhash field1\n(integer) 1\n\n> HEXISTS myhash field2\n(integer) 0\n\n'})}),"\n",(0,i.jsx)(n.h4,{id:"hget",children:"HGET"}),"\n",(0,i.jsxs)(n.p,{children:["Returns the value associated with field in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"available-since-2",children:"Available since:"}),"\n",(0,i.jsx)(n.p,{children:"1.0"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-2",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["HGET ",(0,i.jsx)(n.code,{children:"<key>"})," ",(0,i.jsx)(n.code,{children:"<field>"})]}),"\n",(0,i.jsx)(n.h4,{id:"return-2",children:"Return"}),"\n",(0,i.jsx)(n.p,{children:"Bulk string reply: The value associated with the field."}),"\n",(0,i.jsxs)(n.p,{children:["Nil reply: If the field is not present in the hash or ",(0,i.jsx)(n.strong,{children:"key"})," does not exist."]}),"\n",(0,i.jsx)(n.h4,{id:"examples-2",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n> HSET myhash field1 "foo"\n(integer) 1\n\n> HGET myhash field1\n"foo"\n\n> HGET myhash field2\n(nil)\n\n'})}),"\n",(0,i.jsx)(n.h4,{id:"hgetall",children:"HGETALL"}),"\n",(0,i.jsxs)(n.p,{children:["Returns all fields and values of the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),". In the returned value, every field name is followed by its value, so the length of the reply is twice the size of the hash."]}),"\n",(0,i.jsx)(n.h4,{id:"available-since-3",children:"Available since:"}),"\n",(0,i.jsx)(n.p,{children:"1.0"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-3",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["HGETALL ",(0,i.jsx)(n.code,{children:"<key>"})]}),"\n",(0,i.jsx)(n.h4,{id:"return-3",children:"Return"}),"\n",(0,i.jsxs)(n.p,{children:["Array reply:\nA list of fields and their values stored in the hash, or an empty list when ",(0,i.jsx)(n.strong,{children:"key"})," does not exist."]}),"\n",(0,i.jsx)(n.h4,{id:"examples-3",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n> HSET myhash field1 "Hello"\n(integer) 1\n\n> HSET myhash field2 "World"\n(integer) 1\n\n> HGETALL myhash\n1) "field1"\n2) "Hello"\n3) "field2"\n4) "World"\n\n'})}),"\n",(0,i.jsx)(n.h4,{id:"hincrby",children:"HINCRBY"}),"\n",(0,i.jsxs)(n.p,{children:["Increments the number stored at field in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"})," by increment.\nIf ",(0,i.jsx)(n.strong,{children:"key"})," does not exist, a new ",(0,i.jsx)(n.strong,{children:"key"})," holding a hash is created. If field does not exist the value is set to 0 before the operation is performed."]}),"\n",(0,i.jsx)(n.p,{children:"The range of values supported by HINCRBY is limited to 64 bit signed integers."}),"\n",(0,i.jsx)(n.h4,{id:"available-since-4",children:"Available since:"}),"\n",(0,i.jsx)(n.p,{children:"1.0"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-4",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["HINCRBY ",(0,i.jsx)(n.code,{children:"<key>"})," ",(0,i.jsx)(n.code,{children:"<field>"})," ",(0,i.jsx)(n.code,{children:"<increment>"})]}),"\n",(0,i.jsx)(n.h4,{id:"return-4",children:"Return"}),"\n",(0,i.jsx)(n.p,{children:"Integer reply:"}),"\n",(0,i.jsx)(n.p,{children:"The value of the field after the increment operation."}),"\n",(0,i.jsx)(n.h4,{id:"examples-4",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"> HSET myhash field 5\n(integer) 1\n\n> HINCRBY myhash field 1\n(integer) 6\n\n"})}),"\n",(0,i.jsx)(n.h4,{id:"hincrbyfloat",children:"HINCRBYFLOAT"}),"\n",(0,i.jsxs)(n.p,{children:["Increment the specified field of a hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),", and representing a floating point number, by the specified increment. If the increment value is negative, the result is to have the hash field value decremented instead of incremented. If the field does not exist, it is set to 0 before performing the operation. An error is returned if one of the following conditions occur:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The field contains a value of the wrong type (not a string)."}),"\n",(0,i.jsx)(n.li,{children:"The current field content or the specified increment are not parsable as a double precision floating point number."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"available-since-5",children:"Available since:"}),"\n",(0,i.jsx)(n.p,{children:"1.0"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-5",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["HINCRBYFLOAT ",(0,i.jsx)(n.code,{children:"<key>"})," ",(0,i.jsx)(n.code,{children:"<field>"})," ",(0,i.jsx)(n.code,{children:"<increment>"})]}),"\n",(0,i.jsx)(n.h4,{id:"return-5",children:"Return"}),"\n",(0,i.jsx)(n.p,{children:"Bulk string reply:"}),"\n",(0,i.jsx)(n.p,{children:"The value of the field after the increment operation."}),"\n",(0,i.jsx)(n.h4,{id:"examples-5",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n> HSET mykey field 10.50\n(integer) 1\n\n> HINCRBYFLOAT mykey field 0.1\n"10.6"\n\n'})}),"\n",(0,i.jsx)(n.h4,{id:"hkeys",children:"HKEYS"}),"\n",(0,i.jsxs)(n.p,{children:["Returns all field names in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"available-since-6",children:"Available since:"}),"\n",(0,i.jsx)(n.p,{children:"1.0"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-6",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["HKEYS ",(0,i.jsx)(n.code,{children:"<key>"})]}),"\n",(0,i.jsx)(n.h4,{id:"return-6",children:"Return"}),"\n",(0,i.jsx)(n.p,{children:"Array reply:"}),"\n",(0,i.jsxs)(n.p,{children:["A list of fields in the hash, or an empty list when the ",(0,i.jsx)(n.strong,{children:"key"})," does not exist"]}),"\n",(0,i.jsx)(n.h4,{id:"examples-6",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n> HSET myhash field1 "Hello"\n(integer) 1\n\n> HSET myhash field2 "World"\n(integer) 1\n\n> HKEYS myhash\n1) "field1"\n2) "field2"\n\n'})}),"\n",(0,i.jsx)(n.h4,{id:"hlen",children:"HLEN"}),"\n",(0,i.jsxs)(n.p,{children:["Returns the number of fields contained in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"available-since-7",children:"Available since:"}),"\n",(0,i.jsx)(n.p,{children:"1.0"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-7",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["HLEN ",(0,i.jsx)(n.code,{children:"<key>"})]}),"\n",(0,i.jsx)(n.h4,{id:"return-7",children:"Return"}),"\n",(0,i.jsx)(n.p,{children:"Integer reply"}),"\n",(0,i.jsxs)(n.p,{children:["The number of fields in the hash, or 0 when the ",(0,i.jsx)(n.strong,{children:"key"})," does not exist."]}),"\n",(0,i.jsx)(n.h4,{id:"examples-7",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'> HSET myhash field1 "Hello"\n(integer) 1\n\n> HSET myhash field2 "World"\n(integer) 1\n\n> HLEN myhash\n(integer) 2\n'})}),"\n",(0,i.jsx)(n.h4,{id:"hmget",children:"HMGET"}),"\n",(0,i.jsxs)(n.p,{children:["Returns the values associated with the specified fields in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For every field that does not exist in the hash, a nil value is returned. Because non-existing keys are treated as empty hashes, running HMGET against a non-existing ",(0,i.jsx)(n.strong,{children:"key"})," will return a list of nil values."]}),"\n",(0,i.jsx)(n.h4,{id:"available-since-8",children:"Available since:"}),"\n",(0,i.jsx)(n.p,{children:"1.0"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-8",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["HMGET ",(0,i.jsx)(n.code,{children:"<key>"})," ",(0,i.jsx)(n.code,{children:"<field>"})," ",(0,i.jsx)(n.code,{children:"[field ...]"})]}),"\n",(0,i.jsx)(n.h4,{id:"return-8",children:"Return"}),"\n",(0,i.jsx)(n.p,{children:"Array reply"}),"\n",(0,i.jsx)(n.p,{children:"A list of values associated with the given fields, in the same order as they are requested."}),"\n",(0,i.jsx)(n.h4,{id:"examples-8",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n> HSET myhash field1 "Hello"\n(integer) 1\n\n> HSET myhash field2 "World"\n(integer) 1\n\n> HMGET myhash field1 field2 nofield\n1) "Hello"\n2) "World"\n3) (nil)\n\n'})}),"\n",(0,i.jsx)(n.h4,{id:"hmset",children:"HMSET"}),"\n",(0,i.jsx)(n.p,{children:"Deprecated in favor of HSET with multiple field-value pairs."}),"\n",(0,i.jsxs)(n.p,{children:["Sets the specified fields to their respective values in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),". This command overwrites any specified fields already existing in the hash. If ",(0,i.jsx)(n.strong,{children:"key"})," does not exist, a new ",(0,i.jsx)(n.strong,{children:"key"})," holding a hash is created."]}),"\n",(0,i.jsx)(n.h4,{id:"available-since-9",children:"Available since:"}),"\n",(0,i.jsx)(n.p,{children:"1.0"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-9",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["HMSET ",(0,i.jsx)(n.code,{children:"<key>"})," ",(0,i.jsx)(n.code,{children:"<field>"})," ",(0,i.jsx)(n.code,{children:"<value>"})," ",(0,i.jsx)(n.code,{children:"[field value ...]"})]}),"\n",(0,i.jsx)(n.h4,{id:"return-9",children:"Return"}),"\n",(0,i.jsx)(n.p,{children:"Simple string reply:\nOK."}),"\n",(0,i.jsx)(n.h4,{id:"examples-9",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n> HMSET myhash field1 "Hello" field2 "World"\n"OK"\n\n'})}),"\n",(0,i.jsx)(n.h4,{id:"hrandfield",children:"HRANDFIELD"}),"\n",(0,i.jsxs)(n.p,{children:["When called with just the ",(0,i.jsx)(n.strong,{children:"key"})," argument, return a random field from the hash value stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"If the provided count argument is positive, return an array of distinct fields. The array's length is either count or the hash's number of fields (HLEN), whichever is lower."}),"\n",(0,i.jsx)(n.p,{children:"If called with a negative count, the behavior changes and the command is allowed to return the same field multiple times. In this case, the number of returned fields is the absolute value of the specified count."}),"\n",(0,i.jsx)(n.p,{children:"The optional WITHVALUES modifier changes the reply so it includes the respective values of the randomly selected hash fields."}),"\n",(0,i.jsx)(n.h4,{id:"available-since-10",children:"Available since:"}),"\n",(0,i.jsx)(n.p,{children:"1.0"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-10",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["HRANDFIELD ",(0,i.jsx)(n.code,{children:"<key>"})," ",(0,i.jsx)(n.code,{children:"[count [WITHVALUES]]"})]}),"\n",(0,i.jsx)(n.h4,{id:"return-10",children:"Return"}),"\n",(0,i.jsx)(n.p,{children:"Any of the following:"}),"\n",(0,i.jsxs)(n.p,{children:["Nil reply:\nIf the ",(0,i.jsx)(n.strong,{children:"key"})," doesn't exist."]}),"\n",(0,i.jsx)(n.p,{children:"Bulk string reply:\nA single, randomly selected field when the count option is not used."}),"\n",(0,i.jsxs)(n.p,{children:["Array reply:\nA list containing count fields when the count option is used, or an empty array if the ",(0,i.jsx)(n.strong,{children:"key"})," does not exists."]}),"\n",(0,i.jsx)(n.p,{children:"Array reply:\nA list of fields and their values when count and WITHVALUES were both used."}),"\n",(0,i.jsx)(n.h4,{id:"examples-10",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n> HSET coin heads obverse tails reverse edge null\n(integer) 3\n\n> HRANDFIELD coin\n"edge"\n\n> HRANDFIELD coin\n"tails"\n\n> HRANDFIELD coin -5 WITHVALUES\n1) "edge"\n2) "null"\n3) "edge"\n4) "null"\n5) "tails"\n6) "reverse"\n\n'})}),"\n",(0,i.jsx)(n.h4,{id:"hscan",children:"HSCAN"}),"\n",(0,i.jsx)(n.h4,{id:"available-since-11",children:"Available since:"}),"\n",(0,i.jsx)(n.p,{children:"1.0"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-11",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["HSCAN ",(0,i.jsx)(n.code,{children:"<key>"})," ",(0,i.jsx)(n.code,{children:"cursor"})," ",(0,i.jsx)(n.code,{children:"[MATCH pattern]"})," ",(0,i.jsx)(n.code,{children:"[COUNT count]"})]}),"\n",(0,i.jsx)(n.h4,{id:"return-11",children:"Return"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: a two-element array."}),"\n",(0,i.jsx)(n.p,{children:"The first element is a Bulk string reply that represents an unsigned 64-bit number, the cursor."}),"\n",(0,i.jsx)(n.p,{children:"The second element is an Array reply of field/value pairs that were scanned."}),"\n",(0,i.jsx)(n.h4,{id:"examples-11",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\n> HSCAN myhash 0 MATCH * COUNT 10 \n\n"})}),"\n",(0,i.jsx)(n.h4,{id:"hset",children:"HSET"}),"\n",(0,i.jsxs)(n.p,{children:["Sets the specified fields to their respective values in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["This command overwrites the values of specified fields that exist in the hash. If ",(0,i.jsx)(n.strong,{children:"key"})," doesn't exist, a new ",(0,i.jsx)(n.strong,{children:"key"})," holding a hash is created."]}),"\n",(0,i.jsx)(n.h4,{id:"available-since-12",children:"Available since:"}),"\n",(0,i.jsx)(n.p,{children:"1.0"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-12",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["HSET ",(0,i.jsx)(n.code,{children:"<key>"})," ",(0,i.jsx)(n.code,{children:"<field>"})," ",(0,i.jsx)(n.code,{children:"<value>"})]}),"\n",(0,i.jsx)(n.h4,{id:"return-12",children:"Return"}),"\n",(0,i.jsx)(n.p,{children:"Integer Reply:"}),"\n",(0,i.jsx)(n.p,{children:"1 if field is a new field in the hash and value was set."}),"\n",(0,i.jsx)(n.p,{children:"0 if field already exists in the hash and the value was updated."}),"\n",(0,i.jsx)(n.h4,{id:"examples-12",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n> HSET myhash name "Jon"\n(integer) 1\n\n> HGET myhash name\n"Jon"\n\n'})}),"\n",(0,i.jsx)(n.h4,{id:"hsetnx",children:"HSETNX"}),"\n",(0,i.jsxs)(n.p,{children:["Sets field in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"})," to value, only if field does not yet exist. If ",(0,i.jsx)(n.strong,{children:"key"})," does not exist, a new ",(0,i.jsx)(n.strong,{children:"key"})," holding a hash is created. If field already exists, this operation has no effect."]}),"\n",(0,i.jsx)(n.h4,{id:"available-since-13",children:"Available since:"}),"\n",(0,i.jsx)(n.p,{children:"1.0"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-13",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["HSETNX ",(0,i.jsx)(n.code,{children:"<key>"})," ",(0,i.jsx)(n.code,{children:"<field>"})," ",(0,i.jsx)(n.code,{children:"<value>"})]}),"\n",(0,i.jsx)(n.h4,{id:"return-13",children:"Return"}),"\n",(0,i.jsx)(n.p,{children:"Integer Reply:"}),"\n",(0,i.jsx)(n.p,{children:"1 if the field is a new field in the hash and the value was set."}),"\n",(0,i.jsx)(n.p,{children:"0 if the field already exists in the hash and no operation was performed."}),"\n",(0,i.jsx)(n.h4,{id:"examples-13",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n> HSETNX myhash field "Hello"\n(integer) 1\n\n> HSETNX myhash field "World"\n(integer) 0\n\n> HGET myhash field\n"Hello"\n\n'})}),"\n",(0,i.jsx)(n.h4,{id:"hvals",children:"HVALS"}),"\n",(0,i.jsxs)(n.p,{children:["Returns all values in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"available-since-14",children:"Available since:"}),"\n",(0,i.jsx)(n.p,{children:"1.0"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-14",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["HVALS ",(0,i.jsx)(n.code,{children:"<key>"})]}),"\n",(0,i.jsx)(n.h4,{id:"return-14",children:"Return"}),"\n",(0,i.jsx)(n.p,{children:"Array reply:"}),"\n",(0,i.jsxs)(n.p,{children:["A list of values in the hash, or an empty list when the ",(0,i.jsx)(n.strong,{children:"key"})," does not exist."]}),"\n",(0,i.jsx)(n.h4,{id:"examples-14",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n> HSET myhash field1 "Hello"\n(integer) 1\n\n> HSET myhash field2 "World"\n(integer) 1\n\n> HVALS myhash\n1) "Hello"\n2) "World"\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"list",children:"List"}),"\n",(0,i.jsx)(n.p,{children:"TODO"}),"\n",(0,i.jsx)(n.h2,{id:"sorted-sets",children:"Sorted Sets"}),"\n",(0,i.jsx)(n.p,{children:"TODO"})]})}function x(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,n,l)=>{l.d(n,{Z:()=>a,a:()=>r});var i=l(7294);const s={},d=i.createContext(s);function r(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);