"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6802],{2222:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>o,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=s(5893),i=s(1151);const r={id:"raw-string",sidebar_label:"Raw String",title:"Raw String"},a="Raw String Commands",l={id:"commands/raw-string",title:"Raw String",description:"DECR",source:"@site/docs/commands/raw-string.md",sourceDirName:"commands",slug:"/commands/raw-string",permalink:"/docs/commands/raw-string",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/Garnet/tree/main/website/docs/commands/raw-string.md",tags:[],version:"current",frontMatter:{id:"raw-string",sidebar_label:"Raw String",title:"Raw String"},sidebar:"garnetDocSidebar",previous:{title:"Overview",permalink:"/docs/commands/overview"},next:{title:"Data Structures",permalink:"/docs/commands/data-structures"}},d={},c=[{value:"DECR",id:"decr",level:3},{value:"Syntax",id:"syntax",level:4},{value:"DECRBY",id:"decrby",level:3},{value:"Syntax",id:"syntax-1",level:4},{value:"GET",id:"get",level:3},{value:"Syntax",id:"syntax-2",level:4},{value:"GETRANGE",id:"getrange",level:3},{value:"Syntax",id:"syntax-3",level:4},{value:"INCR",id:"incr",level:3},{value:"Syntax",id:"syntax-4",level:4},{value:"INCRBY",id:"incrby",level:3},{value:"Syntax",id:"syntax-5",level:4},{value:"MGET",id:"mget",level:3},{value:"Syntax",id:"syntax-6",level:4},{value:"MSET",id:"mset",level:3},{value:"Syntax",id:"syntax-7",level:4},{value:"MSETNX",id:"msetnx",level:3},{value:"Syntax",id:"syntax-8",level:4},{value:"PSETEX",id:"psetex",level:3},{value:"Syntax",id:"syntax-9",level:4},{value:"SET",id:"set",level:3},{value:"Syntax",id:"syntax-10",level:4},{value:"SETEX",id:"setex",level:3},{value:"Syntax",id:"syntax-11",level:4},{value:"SETNX",id:"setnx",level:3},{value:"Syntax",id:"syntax-12",level:4},{value:"STRLEN",id:"strlen",level:3},{value:"Syntax",id:"syntax-13",level:4}];function h(e){const n={code:"code",h1:"h1",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"raw-string-commands",children:"Raw String Commands"}),"\n",(0,t.jsx)(n.h3,{id:"decr",children:"DECR"}),"\n",(0,t.jsx)(n.h4,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    DECR key\n"})}),"\n",(0,t.jsx)(n.p,{children:"Decrements the number stored at key by one. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"decrby",children:"DECRBY"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-1",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    DECR key decrement\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Decrements the number stored at key by the value of parameter ",(0,t.jsx)(n.code,{children:"decrement"}),". If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"get",children:"GET"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-2",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    GET key\n"})}),"\n",(0,t.jsx)(n.p,{children:"Gets the value of key. If the key does not exist nil is returned."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"getrange",children:"GETRANGE"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-3",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    GETRANGE key start end\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns the substring of the string value stored at key, determined by the offsets start and end (both are inclusive)."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"incr",children:"INCR"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-4",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    INCR key\n"})}),"\n",(0,t.jsx)(n.p,{children:"Increments the number stored at key by one. If the key does not exist, it is set to 0 before performing the operation."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"incrby",children:"INCRBY"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-5",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    INCRBY key increment\n"})}),"\n",(0,t.jsx)(n.p,{children:"Increments the number stored at key by the value of the parameter increment. If the key does not exist, it is set to 0 before performing the operation."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"mget",children:"MGET"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-6",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    MGET key [key ...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns the values of all specified keys. For every key that does not exist, the special value nil is returned."}),"\n",(0,t.jsx)(n.h3,{id:"mset",children:"MSET"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-7",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    MSET key value [key value ...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Sets the given keys to their respective values. MSET replaces existing values with new values, just as regular SET. See MSETNX if you don't want to overwrite existing values."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"msetnx",children:"MSETNX"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-8",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    MSETNX key value [key value ...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Sets the given keys to their respective values. MSETNX will not perform any operation at all even if just a single key already exists."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"psetex",children:"PSETEX"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-9",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    PSETEX key milliseconds value\n"})}),"\n",(0,t.jsx)(n.p,{children:"PSETEX works exactly like SETEX with the sole difference that the expire time is specified in milliseconds instead of seconds."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"set",children:"SET"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-10",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    SET key value [NX | XX] [GET] [EX seconds | PX milliseconds |\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Set ",(0,t.jsx)(n.strong,{children:"key"})," to hold the string value. If key already holds a value, it is overwritten, regardless of its type. Any previous time to live associated with the ",(0,t.jsx)(n.strong,{children:"key"})," is discarded on successful SET operation."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Options:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"EX seconds -- Set the specified expire time, in seconds (a positive integer)."}),"\n",(0,t.jsx)(n.li,{children:"PX milliseconds -- Set the specified expire time, in milliseconds (a positive integer)."}),"\n",(0,t.jsx)(n.li,{children:"NX -- Only set the key if it does not already exist."}),"\n",(0,t.jsx)(n.li,{children:"XX -- Only set the key if it already exists."}),"\n",(0,t.jsx)(n.li,{children:"KEEPTTL -- Retain the time to live associated with the key."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"setex",children:"SETEX"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-11",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    SETEX key value\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Set ",(0,t.jsx)(n.strong,{children:"key"})," to hold the string value and set ",(0,t.jsx)(n.strong,{children:"key"})," to timeout after a given number of seconds."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"setnx",children:"SETNX"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-12",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    SETNX key value\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Set ",(0,t.jsx)(n.strong,{children:"key"})," to hold value if ",(0,t.jsx)(n.strong,{children:"key"})," does not exist. When ",(0,t.jsx)(n.strong,{children:"key"})," already holds a value, no operation is performed."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"strlen",children:"STRLEN"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-13",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    STRLEN key\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns the length of the string value stored at ",(0,t.jsx)(n.strong,{children:"key"}),"."]})]})}function o(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>a});var t=s(7294);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);