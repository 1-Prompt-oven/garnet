"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7354],{5103:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>c});var s=l(5893),i=l(1151);const a={id:"analytics-commands",sidebar_label:"Analytics",title:"Analytics",slug:"analytics"},r=void 0,t={id:"commands/analytics-commands",title:"Analytics",description:"BITMAP",source:"@site/docs/commands/analytics.md",sourceDirName:"commands",slug:"/commands/analytics",permalink:"/docs/commands/analytics",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/Garnet/tree/main/website/docs/commands/analytics.md",tags:[],version:"current",frontMatter:{id:"analytics-commands",sidebar_label:"Analytics",title:"Analytics",slug:"analytics"},sidebar:"garnetDocSidebar",previous:{title:"Generic",permalink:"/docs/commands/generic"},next:{title:"Data Structures",permalink:"/docs/commands/data-structures"}},d={},c=[{value:"BITMAP",id:"bitmap",level:2},{value:"GETBIT",id:"getbit",level:3},{value:"Syntax",id:"syntax",level:4},{value:"Resp Reply",id:"resp-reply",level:4},{value:"BITCOUNT",id:"bitcount",level:3},{value:"Syntax",id:"syntax-1",level:4},{value:"Resp Reply",id:"resp-reply-1",level:4},{value:"BITFIELD",id:"bitfield",level:3},{value:"TODO: Review functionality",id:"todo-review-functionality",level:3},{value:"Syntax",id:"syntax-2",level:4},{value:"Resp Reply",id:"resp-reply-2",level:4},{value:"BITOP AND",id:"bitop-and",level:3},{value:"Syntax",id:"syntax-3",level:4},{value:"TODO: Review functionality",id:"todo-review-functionality-1",level:3},{value:"Resp Reply",id:"resp-reply-3",level:4},{value:"BITPOS",id:"bitpos",level:3},{value:"Syntax",id:"syntax-4",level:4},{value:"Resp Reply",id:"resp-reply-4",level:4},{value:"SETBIT",id:"setbit",level:3},{value:"Syntax",id:"syntax-5",level:4},{value:"Resp Reply",id:"resp-reply-5",level:4},{value:"BITOP NOT",id:"bitop-not",level:3},{value:"Syntax",id:"syntax-6",level:4},{value:"Resp Reply",id:"resp-reply-6",level:4},{value:"HYPERLOGLOG",id:"hyperloglog",level:2},{value:"PFADD",id:"pfadd",level:3},{value:"Syntax",id:"syntax-7",level:4},{value:"Resp Reply",id:"resp-reply-7",level:4},{value:"PFCOUNT",id:"pfcount",level:3},{value:"Syntax",id:"syntax-8",level:4},{value:"Resp Reply",id:"resp-reply-8",level:4},{value:"PFMERGE",id:"pfmerge",level:3},{value:"Syntax",id:"syntax-9",level:4},{value:"Resp Reply",id:"resp-reply-9",level:4},{value:"PUB/SUB",id:"pubsub",level:2},{value:"PSUBSCRIBE",id:"psubscribe",level:3},{value:"Syntax",id:"syntax-10",level:4},{value:"Resp Reply",id:"resp-reply-10",level:4},{value:"PUBLISH",id:"publish",level:3},{value:"Syntax",id:"syntax-11",level:4},{value:"Resp Reply",id:"resp-reply-11",level:4},{value:"PUNSUBSCRIBE",id:"punsubscribe",level:3},{value:"Syntax",id:"syntax-12",level:4},{value:"Resp Reply",id:"resp-reply-12",level:4},{value:"SUBSCRIBE",id:"subscribe",level:3},{value:"Syntax",id:"syntax-13",level:4},{value:"Resp Reply",id:"resp-reply-13",level:4},{value:"UNSUBSCRIBE",id:"unsubscribe",level:3},{value:"Syntax",id:"syntax-14",level:4},{value:"Resp Reply",id:"resp-reply-14",level:4}];function h(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"bitmap",children:"BITMAP"}),"\n",(0,s.jsx)(n.h3,{id:"getbit",children:"GETBIT"}),"\n",(0,s.jsx)(n.h4,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"   GETBIT key offset \n"})}),"\n",(0,s.jsx)(n.p,{children:"Returns the bit value at offset in the string value stored at key."}),"\n",(0,s.jsx)(n.h4,{id:"resp-reply",children:"Resp Reply"}),"\n",(0,s.jsx)(n.p,{children:"The bit value stored at offset, one of the following:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Integer reply: 0."}),"\n",(0,s.jsx)(n.li,{children:"Integer reply: 1."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"bitcount",children:"BITCOUNT"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-1",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"    BITCOUNT key [start end [BYTE | BIT]]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Count the number of set bits (population counting) in a string."}),"\n",(0,s.jsx)(n.h4,{id:"resp-reply-1",children:"Resp Reply"}),"\n",(0,s.jsx)(n.p,{children:"Integer reply: the number of bits set to 1."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"bitfield",children:"BITFIELD"}),"\n",(0,s.jsx)(n.h3,{id:"todo-review-functionality",children:"TODO: Review functionality"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-2",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash"})}),"\n",(0,s.jsx)(n.h4,{id:"resp-reply-2",children:"Resp Reply"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"bitop-and",children:"BITOP AND"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-3",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash"})}),"\n",(0,s.jsx)(n.h3,{id:"todo-review-functionality-1",children:"TODO: Review functionality"}),"\n",(0,s.jsx)(n.h4,{id:"resp-reply-3",children:"Resp Reply"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"bitpos",children:"BITPOS"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-4",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"    BITPOS key bit [start [end [BYTE | BIT]]]    \n"})}),"\n",(0,s.jsx)(n.p,{children:"Returns the position of the first bit set to 1 or 0 in a string."}),"\n",(0,s.jsx)(n.h4,{id:"resp-reply-4",children:"Resp Reply"}),"\n",(0,s.jsx)(n.p,{children:"One of the following:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Integer reply: the position of the first bit set to 1 or 0 according to the request"}),"\n",(0,s.jsx)(n.li,{children:"Integer reply: -1. In case the bit argument is 1 and the string is empty or composed of just zero bytes"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"setbit",children:"SETBIT"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-5",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"    SETBIT key offset value\n"})}),"\n",(0,s.jsx)(n.p,{children:"Sets or clears the bit at offset in the string value stored at key. The bit is either set or cleared depending on value, which can be either 0 or 1. When key does not exist, a new string value is created."}),"\n",(0,s.jsx)(n.h4,{id:"resp-reply-5",children:"Resp Reply"}),"\n",(0,s.jsx)(n.p,{children:"Integer reply: the original bit value stored at offset."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"bitop-not",children:"BITOP NOT"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-6",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash"})}),"\n",(0,s.jsx)(n.h4,{id:"resp-reply-6",children:"Resp Reply"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"hyperloglog",children:"HYPERLOGLOG"}),"\n",(0,s.jsx)(n.h3,{id:"pfadd",children:"PFADD"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-7",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash"})}),"\n",(0,s.jsx)(n.h4,{id:"resp-reply-7",children:"Resp Reply"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"pfcount",children:"PFCOUNT"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-8",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash"})}),"\n",(0,s.jsx)(n.h4,{id:"resp-reply-8",children:"Resp Reply"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"pfmerge",children:"PFMERGE"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-9",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash"})}),"\n",(0,s.jsx)(n.h4,{id:"resp-reply-9",children:"Resp Reply"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"pubsub",children:"PUB/SUB"}),"\n",(0,s.jsx)(n.h3,{id:"psubscribe",children:"PSUBSCRIBE"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-10",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash"})}),"\n",(0,s.jsx)(n.h4,{id:"resp-reply-10",children:"Resp Reply"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"publish",children:"PUBLISH"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-11",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash"})}),"\n",(0,s.jsx)(n.h4,{id:"resp-reply-11",children:"Resp Reply"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"punsubscribe",children:"PUNSUBSCRIBE"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-12",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash"})}),"\n",(0,s.jsx)(n.h4,{id:"resp-reply-12",children:"Resp Reply"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"subscribe",children:"SUBSCRIBE"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-13",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash"})}),"\n",(0,s.jsx)(n.h4,{id:"resp-reply-13",children:"Resp Reply"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"unsubscribe",children:"UNSUBSCRIBE"}),"\n",(0,s.jsx)(n.h4,{id:"syntax-14",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash"})}),"\n",(0,s.jsx)(n.h4,{id:"resp-reply-14",children:"Resp Reply"}),"\n",(0,s.jsx)(n.hr,{})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},1151:(e,n,l)=>{l.d(n,{Z:()=>t,a:()=>r});var s=l(7294);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);