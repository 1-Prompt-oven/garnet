"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1302],{3916:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=s(5893),t=s(1151);const i={id:"resp-bench",sidebar_label:"Resp.benchmark",title:"The Resp.benchmark Tool"},a="The Resp.benchmark Tool",l={id:"benchmarking/resp-bench",title:"The Resp.benchmark Tool",description:"Garnet project contains a Benchmark tool for running RESP benchmarking using different clients, different workloads and different strategies for measuring throughput, performance and latency.",source:"@site/docs/benchmarking/resp-bench.md",sourceDirName:"benchmarking",slug:"/benchmarking/resp-bench",permalink:"/docs/benchmarking/resp-bench",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/Garnet/tree/main/website/docs/benchmarking/resp-bench.md",tags:[],version:"current",frontMatter:{id:"resp-bench",sidebar_label:"Resp.benchmark",title:"The Resp.benchmark Tool"},sidebar:"garnetDocSidebar",previous:{title:"Results (Resp.bench)",permalink:"/docs/benchmarking/results-resp-bench"},next:{title:"Overview",permalink:"/docs/commands/overview"}},o={},c=[{value:"Usage",id:"usage",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Commands benchmarked",id:"commands-benchmarked",level:2},{value:"Raw strings commands",id:"raw-strings-commands",level:3},{value:"Bitmaps commands",id:"bitmaps-commands",level:3},{value:"Hyperloglog commands",id:"hyperloglog-commands",level:3},{value:"Sorted Sets &amp; Geo commands",id:"sorted-sets--geo-commands",level:3},{value:"Server commands",id:"server-commands",level:3},{value:"Type of benchmarks",id:"type-of-benchmarks",level:2},{value:"Online benchmarks",id:"online-benchmarks",level:3},{value:"Offline benchmarks",id:"offline-benchmarks",level:3},{value:"Preloading data for benchmarks",id:"preloading-data-for-benchmarks",level:2},{value:"Running benchmarks in Cluster mode",id:"running-benchmarks-in-cluster-mode",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"the-respbenchmark-tool",children:"The Resp.benchmark Tool"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Garnet"})," project contains a Benchmark tool for running RESP benchmarking using different clients, different workloads and different strategies for measuring throughput, performance and latency."]}),"\n",(0,r.jsx)(n.p,{children:"This tool exists under the folder:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"> Garnet\\benchmark\\Resp.benchmark\n"})}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.p,{children:"Below is the description of all the options available to configure the type and settings for the benchmarks."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"-p, --port                  (Default: 3278) Port to connect to\n\n-h, --host                  (Default: 127.0.0.1) IP address to connect to\n\n--clientaddr                IP address of client (used when collecting metrics for dashboards).\n\n-s, --skipload              (Default: false) Skip loading phase\n\n--dbsize                    (Default: 1024) DB size\n\n--totalops                  (Default: 33554432) Total ops\n\n--op                        (Default: GET) Operation type (GET, MGET, INCR, PING, ZADDREM, PFADD)\n\n--keylength                 (Default: 1) Key length (bytes) - padded, 0 indicates pad to max DB size\n\n--valuelength               (Default: 8) Value length (bytes) - 0 indicates use key as value\n\n-b, --batchsize             (Default: 4096) Batch size, number of requests (comma separated)\n\n--runtime                   (Default: 15) Run time (seconds)\n\n-t, --threads               (Default: 1 2 4 8 16 32) Number of threads (comma separated)\n\n-a, --auth                  Authentication password\n\n--burst                     (Default: false) Wait for response or burst the system (GarnetClientSession)\n\n--cluster                   (Default: false) Cluster mode benchmark enable\n\n--shard                     (Default: -1) Restrict benchmark to specific shard\n\n--replica-reads             (Default: false) Allow replica reads for cluster mode.\n\n--lset                      (Default: false) Use set instead of mset to load data for benchmarking.\n\n--zipf                      (Default: false) Zipf data distribution (0.99)\n\n--client                    (Default: LightClient) Choose ClientType to run benchmark (LightClient, SERedis, GarnetClientSession)\n\n--pool                      (Default: false) Pool client instances. Supports SERedis, GarnetClient and GarnetClientSession (online bench only).\n\n--tls                       (Default: false) Enable TLS.\n\n--tlshost                   (Default: GarnetTest) TLS remote host name.\n\n-o, --online                (Default: false) Online get/set mix based on --readpercent.\n\n-x, --txn                   (Default: false) Transaction micro benchmark\n\n--itp                       (Default: 1) Intra-thread parallelism (online bench only).\n\n--sync                      (Default: false) Sync mode (online bench GarnetClient only).\n\n--ttl                       (Default: 0) Ttl for keys, required if --op is SETEX, or can be used to generate keys with expiration (both string and zset) in online\n                            benchmarks.\n\n--sscardinality             (Default: 0) Number of unique sorted sets. Same key will always go to the same sorted set.\n\n--client-hist               (Default: false) Enable client side latency tracking through internal client histogram.\n\n--op-percent                (Default: 60 30 10) Percent of commands executed from workload\n\n--op-workload               (Default: GET SET DEL) Workload of commands for online bench.\n\n--object-dbsize             (Default: -1) Object DB size\n\n--save-freq                 (Default: 0) Save (checkpoint) frequency in seconds\n\n--logger-level              (Default: Information) Logging level\n\n--disable-console-logger    (Default: false) Disable console logger.\n\n--file-logger               Enable file logger and write to the specified path.\n\n--enable-dashboard          (Default: false) Enable metrics recording for dashboards.\n\n--migrate-freq              (Default: 0) Used to control frequency of a task that issues migrate command (Only for cluster option).\n\n--migrate-batch             (Default: 100) Max number of slots picked to migrate from one node to another from background task that executes migrate (Only for\n                            cluster option).\n\n--help                      Display this help screen.\n\n--version                   Display version information.\n"})}),"\n",(0,r.jsx)(n.p,{children:"This output is sent to the console when running the benchmark tool using"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"--help"})}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"> cd Garnet\\benchmark\\Resp.benchmark\n> dotnet run -c Release --framework net8.0 -- --help\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,r.jsx)(n.p,{children:"The benchmark operates in two phases."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Load key in database"}),"\n",(0,r.jsx)(n.li,{children:"Run benchmark for a single command"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"In both phases ReqGen is used to generate the requests for either loading data\nor performing the benchmark."}),"\n",(0,r.jsx)(n.p,{children:"There are several options to generate requests as indicated by the constructor of the ReqGen class."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"        public ReqGen(\n            int Start,\n            int DbSize,\n            int NumOps,\n            int BatchSize,\n            OpType opType,\n            bool randomGen = true,\n            bool randomServe = true,\n            int keyLen = default,\n            int valueLen = default)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Start: Key offset."}),"\n",(0,r.jsx)(n.li,{children:"DbSize: Number of keys in the database"}),"\n",(0,r.jsx)(n.li,{children:"NumOps: Total number of operations to be perfomed"}),"\n",(0,r.jsx)(n.li,{children:"BatchSize: Total number of ops in a batch."}),"\n",(0,r.jsx)(n.li,{children:"opType: Operation to be performed (e.g. GET, MSET, INCR)"}),"\n",(0,r.jsx)(n.li,{children:"randomGen: Whether to generate keys in sequence or randomly."}),"\n",(0,r.jsx)(n.li,{children:"randomServe: Whether serve the requests randomly or in the sequence they were generated."}),"\n",(0,r.jsx)(n.li,{children:"keyLen: The least number of bytes in a key. Keys are assigned from (Start,DbSize) range and padded accordingly to build a set of at least. The default size equals the maximum number of digits of DbSize."}),"\n",(0,r.jsx)(n.li,{children:"valueLen: The total number of bytes in a value."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The following method is used to load the data into the database"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"        public void LoadData(\n            int loadDbThreads = 8, \n            int BatchSize = 1 << 12, \n            int keyLen = default, \n            int valueLen = default)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"loadDbThreads: Total number of threads used for loading"}),"\n",(0,r.jsx)(n.li,{children:"BatchSize: Total number of key-value pair in a batch"}),"\n",(0,r.jsx)(n.li,{children:"keyLen: length of a key in bytes."}),"\n",(0,r.jsx)(n.li,{children:"valueLen: length of a value in bytes."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The following method is used to run an iteration of the benchmark for a given operation with the specified parameters"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"        public void Run(\n            OpType opType,\n            int TotalOps,\n            int[] NumThreads,\n            int BatchSize = 1 << 12,\n            TimeSpan runTime = default,\n            bool randomGen = true,\n            bool randomServe = true,\n            int keyLen = default,\n            int valueLen = default)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"opType: operation to benchmark"}),"\n",(0,r.jsx)(n.li,{children:"totalops: total ops executed for the given benchmark."}),"\n",(0,r.jsx)(n.li,{children:"NumThreads: Total number of clients used to run the benchmark"}),"\n",(0,r.jsx)(n.li,{children:"BatchSize: Total number of operations in a single batch."}),"\n",(0,r.jsx)(n.li,{children:"runTime: Minimum duration to run the benchmark."}),"\n",(0,r.jsx)(n.li,{children:"randomGen: The order in which keys are generated in the requests."}),"\n",(0,r.jsx)(n.li,{children:"randomServe: The order in which the request buffers are accessed."}),"\n",(0,r.jsx)(n.li,{children:"keyLen: least number of bytes in a single key."}),"\n",(0,r.jsx)(n.li,{children:"valueLen: total number of bytes in a value."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"commands-benchmarked",children:"Commands benchmarked"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"commands"})," that can be benchmarked from each category are:"]}),"\n",(0,r.jsx)(n.h3,{id:"raw-strings-commands",children:"Raw strings commands"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"SET"}),"\n",(0,r.jsx)(n.li,{children:"GET"}),"\n",(0,r.jsx)(n.li,{children:"MGET"}),"\n",(0,r.jsx)(n.li,{children:"INCR"}),"\n",(0,r.jsx)(n.li,{children:"SETEX"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"bitmaps-commands",children:"Bitmaps commands"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"SETBIT"}),"\n",(0,r.jsx)(n.li,{children:"BITOP"}),"\n",(0,r.jsx)(n.li,{children:"GETBIT"}),"\n",(0,r.jsx)(n.li,{children:"BITCOUNT"}),"\n",(0,r.jsx)(n.li,{children:"BITPOS"}),"\n",(0,r.jsx)(n.li,{children:"BITOP_AND"}),"\n",(0,r.jsx)(n.li,{children:"BITOP_OR"}),"\n",(0,r.jsx)(n.li,{children:"BITOP_XOR"}),"\n",(0,r.jsx)(n.li,{children:"BITOP_NOT"}),"\n",(0,r.jsx)(n.li,{children:"BITFIELD_GET"}),"\n",(0,r.jsx)(n.li,{children:"BITFIELD_SET"}),"\n",(0,r.jsx)(n.li,{children:"BITFIELD_INCR"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"hyperloglog-commands",children:"Hyperloglog commands"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"PFADD"}),"\n",(0,r.jsx)(n.li,{children:"PFCOUNT"}),"\n",(0,r.jsx)(n.li,{children:"PFMERGE"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"sorted-sets--geo-commands",children:"Sorted Sets & Geo commands"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ZADD"}),"\n",(0,r.jsx)(n.li,{children:"GEOADD"}),"\n",(0,r.jsx)(n.li,{children:"ZREM"}),"\n",(0,r.jsx)(n.li,{children:"ZCARD"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"server-commands",children:"Server commands"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"PING"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"type-of-benchmarks",children:"Type of benchmarks"}),"\n",(0,r.jsx)(n.h3,{id:"online-benchmarks",children:"Online benchmarks"}),"\n",(0,r.jsx)(n.p,{children:"These options measure the average response time of the server:"}),"\n",(0,r.jsx)(n.p,{children:"From the folder:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Garnet/benchmark/Resp.benchmark\n"})}),"\n",(0,r.jsx)(n.p,{children:"Executing:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'dotnet run -c Release --framework net8.0 -- --op-workload "GET, SET" --online -b 1 --op-percent "50, 50" -t 1\n'})}),"\n",(0,r.jsx)(n.p,{children:"Or:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'dotnet run -c Release --framework net8.0 -- --op-workload "GET, SET" --online -b 1 --op-percent "50, 50" -t 16 --client GarnetClientSession.\n'})}),"\n",(0,r.jsx)(n.p,{children:"Or:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'dotnet run -c Release --framework net8.0  -- --op-workload "ZADD, ZCARD" --online -b 1 --op-percent "50, 50" -t 1 --client SERedis --keylength 8\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Where:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"--op-workload: the different commands to send."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"--online: The type of the benchmark to do."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"--op-percent: The weight of the load for each command."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"--t or threads: The number of conexions the tool will create to send the load."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"--client: The client to use. GarnetClientSession is good option to stress the system to its maximum. SERedis stands for Stack Exchange library."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"--keylength: The length for the size of the key."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"offline-benchmarks",children:"Offline benchmarks"}),"\n",(0,r.jsx)(n.p,{children:"This category of benchmark use a Light Client to measure how many requests the server handles in a given period of time."}),"\n",(0,r.jsx)(n.p,{children:"Some examples of running offline benchmarks are:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"dotnet run -c Release --framework net8.0 -- --op GET -t 2,4,8,16 -b 512 --dbsize 10241024 --keylength 1024\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"dotnet run -c Release --framework net8.0 -- --op ZADDCARD -t 64 --b 512 --dbsize 16777216 --keylength 512\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Where:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"--op: the command to send. ZADDCARD will exercise the ZADD and ZCARD in the same run."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"--t or threads: The number of threads to use."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"--dbsize: The amount of keys to create in the store"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"preloading-data-for-benchmarks",children:"Preloading data for benchmarks"}),"\n",(0,r.jsx)(n.p,{children:"One strategy to make reads and writes doing effective work is pre-populate the store with keys before running the GET benchmarks, by doing the following steps:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Execute MSET with the Resp Benchmark tool:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"dotnet run -c Release --framework net8.0 -- --op MSET --dbsize 16777216 --keylength 512\n"})}),"\n",(0,r.jsx)(n.p,{children:"Once it is done execute the GET command in online mode:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"dotnet run -c Release --framework net8.0 -- --op-workload GET --online -b 1 --op-percent 100 -t 64 --client GarnetClientSession --itp 1024 --runtime -1 --dbsize 16777216 --keylength 512\n"})}),"\n",(0,r.jsx)(n.p,{children:"if you want to know how high the hit rate you can execute from a command line tool the command, like Memurari-cli."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"INFO stats\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Look at the ",(0,r.jsx)(n.strong,{children:"garnet_hit_rate"})," metric, the value ideally, should be close to 100."]}),"\n",(0,r.jsx)(n.p,{children:"It is important to have the metrics enabled in Garnet server for getting the stats number with the INFO command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:" --latency-monitor --metrics-sampling-freq 5\n"})}),"\n",(0,r.jsx)(n.h2,{id:"running-benchmarks-in-cluster-mode",children:"Running benchmarks in Cluster mode"})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>a});var r=s(7294);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);